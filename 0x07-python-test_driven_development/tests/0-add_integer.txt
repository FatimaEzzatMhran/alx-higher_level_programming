===============================
The ``0-add_integer.py`` module
===============================

Using ``add_integer``
-------------------------------

Importing the function from the module:
	>>> add_integer = __import__("0-add_integer").add_integer

Checking regular addition:
	>>> add_integer(5,6)
	11

Checking negative addition:
	>>> add_integer(-1,-2)
	-3

Checking floating-point values:
	>>> add_integer(2.0, 3.0)
	5

Checking floating-point values with non-floating point values:
	>>> add_integer(2.3, -3)
	-1

Checking floates are casted to integers:
	>>> add_integer(2.9, 0.2)
	2

Checking if only one arg is passed, consedring the default arg 98:
	>>> add_integer(2)
	100

Checking if passed NaN:
	>>> add_integer(1, float('nan'))
	Traceback (most recent call last):
	ValueError: cannot convert float NaN to integer

Checking if passed NaN:
        >>> add_integer(float('nan'))
        Traceback (most recent call last):
	...
        ValueError: cannot convert float NaN to integer

Checking of passed inf:
	>>> add_integer(1, float('inf'))
	Traceback (most recent call last):
	OverflowError: cannot convert float infinity to integer

Checking of passed inf:
        >>> add_integer(float('inf'))
        Traceback (most recent call last):
        OverflowError: cannot convert float infinity to integer

Checking if a non-integer or non-float is passed for arg1:
	>>> add_integer("hi", 5)
	Traceback (most recent call last):
	TypeError: a must be an integer

Checking if a non-integer or non-float is passed for arg2:
        >>> add_integer(7, "hi")
        Traceback (most recent call last):
        TypeError: b must be an integer

Checking if a non-integer or non-float is passed for arg1 and arg2:
        >>> add_integer("hi", "there")
        Traceback (most recent call last):
        TypeError: a must be an integer
